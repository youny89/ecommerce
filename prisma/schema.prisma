// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String
  
  billboard     Billboard[] @relation("StoreToBillboard")
  categories    Category[]  @relation("StoreToCategory")      
  sizes         Size[]      @relation("StoreToSize")
  colors        Color[]     @relation("StoreToColor")
  products      Product[]   @relation("StoreToProduct")
  orders        Order[]     @relation("StoreToOrder")

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Billboard {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  label         String
  imageUrl      String

  storeId       String      @db.ObjectId
  store         Store       @relation("StoreToBillboard", fields: [storeId], references: [id])

  categories    Category[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

}

model Category {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String

  storeId       String      @db.ObjectId      
  store         Store       @relation("StoreToCategory", fields:[storeId], references: [id])

  billboardId   String      @db.ObjectId
  billboard     Billboard   @relation(fields: [billboardId], references: [id])

  products      Product[]   @relation("CategoryToProduct")

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Size {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String      
  value         String      

  storeId       String      @db.ObjectId
  store         Store       @relation("StoreToSize", fields: [storeId], references: [id])

  

  products      Product[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Color {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  value         String

  storeId       String      @db.ObjectId
  store         Store       @relation("StoreToColor", fields: [storeId], references: [id])

  products      Product[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}



model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int
  description   String
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)

  storeId       String      @db.ObjectId
  store         Store       @relation("StoreToProduct",fields: [storeId], references: [id])
  
  categoryId    String      @db.ObjectId
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])

  sizeId        String      @db.ObjectId
  size          Size        @relation(fields: [sizeId], references: [id])

  colorId       String      @db.ObjectId
  color         Color       @relation(fields:[colorId], references: [id])

  images        Image[]

  orderItems    OrderItem[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt


}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  isPaid        Boolean     @default(false)  
  phone         String      @default("")
  address       String      @default("")

  storeId       String      @db.ObjectId
  store         Store       @relation("StoreToOrder", fields: [storeId], references: [id])

  orderItems    OrderItem[] 

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id            String      @id @map("_id") @default(auto()) @db.ObjectId 
  
  orderId       String      @db.ObjectId
  order         Order       @relation(fields: [orderId], references: [id])
  productId     String      @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
}

model Image {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  url           String

  productId     String      @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id], onDelete:Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}